---
import type { ImageMetadata } from "astro";
import { getCollection } from "astro:content";
import Layout from "@/layouts/multi.astro";
import "@fontsource-variable/montserrat";
import "@fontsource-variable/fira-code";
import "@fontsource-variable/source-code-pro";
import "@fontsource-variable/source-sans-3";
import "@fontsource/source-sans-pro";
import "@fontsource/roboto";
import "@/styles/GlobalStyling.scss";
import "@/styles/global.css";


import SectionIntro from "@/components/SectionIntro.astro";
import SectionContent from "@/components/SectionContent.astro";
import Reviews from "@/components/Reviews.astro";

const pages = await getCollection("pages");

const ParallaxImagesSrc = import.meta.glob<{ default: ImageMetadata }>("../assets/Albums/Parallax/*");
const ParallaxImages = Object.keys(ParallaxImagesSrc);

const IntroImagesSrc = import.meta.glob<{ default: ImageMetadata }>("../assets/Albums/Intro/*");
const IntroImages = Object.keys(IntroImagesSrc);
const IntroImage = await IntroImagesSrc[IntroImages[0]]();
---

<Layout title="Eckwerk Stuttgart">

  <SectionIntro title={pages[0].data.slogan} image={IntroImage.default.src} />

  {pages.map(async (originPage, index) => {
    const { Content } = await originPage.render();
    const imagePath = ParallaxImages[index % ParallaxImages.length];
    const image = await ParallaxImagesSrc[imagePath]();

    return originPage.data.mainStage === true ? (
      <>
        <SectionContent id={originPage.data.title}
                        style={`background-image: url('${image.default.src}'); @media (max-width: 768px) { background-image: url('/path/to/mobile-image.jpg'); }`}>
          <Content />
        </SectionContent>

        {index === 3 &&
          <section class="max-content bg-white">
            <article>
              <Reviews />
            </article>
          </section>


        }
      </>
    ) : null;
  })}
</Layout>

<style lang="scss" is:global>
  @import "./../styles/GlobalStyling";

  section {
    background-color: $color-white;
    background-repeat: no-repeat;
    scroll-margin-top: 8vh;

    @include min-width("l") {
      background-attachment: fixed;
      background-size: cover;
      background-position: 50%;
      scroll-margin-top: 24vh;
      background-position: 25%;
    }

    @include min-width("xl") {
      background-position: 25%;
    }

    article {
      padding: 2vh 5vw 3vh 5vw;
      background-color: $color-white;

      @include min-width("s") {
        padding: 2vh 5vw 3vh 5vw;
        background-position: 0%;
      }

      @include min-width("m") {
        padding: 4vh 10vw 5vh 10vw;
        background-position: 45%;
      }

      @include min-width("l") {
        padding: 4vh 15vw 5vh 15vw;
        background-position: 45%;
      }

      @include min-width("xl") {
        padding: 4vh 15vw 5vh 15vw;
        background-position: 45%;
      }

      div.logo {
        p {
          display: flex;
          flex-direction: column;
          justify-content: center;
          gap: 2rem;
          padding: 3rem 0 1rem 0;

          @include min-width("m") {
            flex-direction: row;
          }
        }
      }
    }

    &.carousel {
      width: 100vw;
      min-height: max-content;
      padding: 2vh 0 3vh 0;

      @include min-width("s") {
        padding: 2vh 0 3vh 0;
      }

      @include min-width("m") {
        padding: 4vh 0 5vh 0;
      }

      @include min-width("l") {
        padding: 4vh 0 5vh 0;
      }

      @include min-width("xl") {
        padding: 4vh 0 5vh 0;
      }
    }

    &:last-child {
      min-height: 100vh;
    }
  }

</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const mediaQueryM = window.matchMedia("(min-width: 768px)");

    if (mediaQueryM.matches) {
      const sections = document.querySelectorAll("section.content");

      sections.forEach((section, index) => {
        const article = section.querySelector("article");
        if (article && article.id !== "Kontakt" && index !== sections.length - 1) {
          const articleHeight = article.offsetHeight;
          // @ts-ignore
          section.style.height = `calc(${articleHeight}px + 50vh)`;
        }
      });
    }
  });
</script>
