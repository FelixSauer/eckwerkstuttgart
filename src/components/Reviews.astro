---
const reviews = await fetchReviews();
async function fetchReviews() {
	const API_KEY = 'AIzaSyAlDmSirID3ctmTbZn5-rJG6Z-ofXZCmws';
	const PLACE_ID = 'ChIJ_erOoVuif6kRZSACbgSg1Ss';
	const url = `https://maps.googleapis.com/maps/api/place/details/json?place_id=${PLACE_ID}&fields=reviews&language=de&key=${API_KEY}`;

	const response = await fetch(url);
	const data = await response.json();

	if (!response.ok) {
		throw new Error(data.error_message || 'Failed to fetch Google Reviews');
	}

	return data.result.reviews || [];
}

const renderStars = (rating: number) => {
	const fullStars = Math.floor(rating);
	const halfStar = rating % 1 >= 0.5 ? 1 : 0;
	const emptyStars = 5 - fullStars - halfStar;
	return '★'.repeat(fullStars) + '☆'.repeat(emptyStars);
};
---

<div class='reviews'>
    <h1>Google Reviews</h1>
    <div class='carousel'>
        <div class='carousel-inner'>
					{
						// @ts-ignore

						reviews.map((review) => (
                    <div class='carousel-item'>
                        <div class="item">
                            <a href={review.author_url} target='_blank'>
                                <h3>{review.author_name}</h3>
                            </a>
                            <div>
                                <div class="stars">{renderStars(review.rating)}</div>
                                <div>{review.relative_time_description}</div>
                            </div>
                            <p>{review.text}</p>
                        </div>
                    </div>
						))
					}
        </div>
    </div>
</div>

<style>
    .reviews {
        display: flex;
        flex-direction: column;
        gap: 2rem;

        .carousel {
            width: 100%;
            margin: auto;
            overflow-y: scroll;

            &::-webkit-scrollbar {
                display: none;
            }

            .carousel-inner {
                display: flex;
                transition: transform 0.5s ease;

                .carousel-item {
                    min-width: 100%;
                    box-sizing: border-box;

                    &:last-child {
                        padding-right: unset;
                    }

                    .item {
                        display: flex;
                        flex-direction: column;
                        gap: 1rem;
                        margin: 1rem;

                        div {
                            display: flex;
                            gap: 1rem;

                            .stars {
                                color: gold;
                            }
                        }
                    }
                }
            }
        }
    }
</style>

<script>
	/*	let currentIndex = 0;

		function showSlide(index) {
			const slides = document.querySelectorAll('.carousel-item');
			const totalSlides = slides.length;

			if (totalSlides === 0) return;

			currentIndex = (index + totalSlides) % totalSlides;
			const offset = -currentIndex * 100;

			const carouselInner = document.querySelector('.carousel-inner');
			if (carouselInner) {
				carouselInner.style.transform = `translateX(${offset}%)`;
			}

			slides.forEach((slide, i) => {
				slide.style.opacity = i === currentIndex ? '1' : '0';
			});
		}

		function startAutoSlide() {
			setInterval(() => {
				currentIndex++;
				showSlide(currentIndex);
			}, 5000);
		}

		document.addEventListener('DOMContentLoaded', () => {
			showSlide(0);
			startAutoSlide();
		});*/
</script>
