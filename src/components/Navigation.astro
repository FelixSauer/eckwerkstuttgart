---
import type { INavigation } from '@/types/navigation'
import { Icon } from 'astro-icon/components'

interface Props {
	navigation: INavigation[]
	navigationPostion: string
}

const { navigation, navigationPostion } = Astro.props as Props
---

<nav class="flex items-center">
	<div class="hidden lg:block" id="navbarDesktop">
		<ul class="m-0 flex list-none gap-6 p-0 font-normal first:m-0 last:m-0">
			{
				navigation.map((item) => (
					<li>
						<a
							href={navigationPostion === 'header' ? '/#' + item.title : item.title}
							data-href={item.title}
							aria-label={item.title}
							aria-current="page"
							class="cursor-pointer font-sourceCodePro text-xl font-light uppercase tracking-wide no-underline subpixel-antialiased hover:text-secondary"
						>
							{item.title}
						</a>
					</li>
				))
			}
		</ul>
	</div>
	<div class="lg:hidden">
		<button
			id="navbarToggle"
			aria-label="Toggle navigation menu"
			class="relative z-40 pt-1 cursor-pointer border-0 bg-transparent text-3xl sm:text-5xl text-white hover:text-secondary flex align-middle"
		>
			<Icon name="line-md:close-to-menu-transition" />
		</button>

		<div
			id="navbarMenu"
			class="absolute hidden left-0 top-0 z-30 h-screen w-screen translate-x-full transform bg-primary transition-transform duration-300 ease-in-out"
		>
			<ul class="flex h-full flex-col justify-center gap-8 p-8">
				{
					navigation.map((item) => (
						<li>
							<a
								href={navigationPostion === 'header' ? '/#' + item.title : item.title}
								data-href={item.title}
								aria-label="{item.title}"
								aria-current="page"
								id="navItem"
								class="m-1 text-4xl text-white hover:text-secondary"
							>
								{item.title}
							</a>
						</li>
					))
				}
			</ul>
		</div>
	</div>
</nav>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const navbarToggle = document.getElementById('navbarToggle')
		const navbarMenu = document.getElementById('navbarMenu')
		const navItems = document.querySelectorAll('#navItem')

		if (!navbarToggle || !navbarMenu) {
			console.error('Navbar elements are missing')
			return
		}

		const toggleMenu = () => {
      navbarMenu.classList.toggle('hidden')
			navbarMenu.classList.toggle('translate-x-full')
		}

		const closeMenu = () => {
			navbarMenu.classList.add('translate-x-full')
      navbarMenu.classList.toggle('hidden')
		}

		navbarToggle.addEventListener('click', toggleMenu)

		document.addEventListener('click', (event) => {
			if (event === null) {
				throw new Error('Event is null')
			}

			if (
				!navbarMenu.contains(event.target as Node) &&
				!navbarToggle.contains(event.target as Node)
			) {
				closeMenu()
			}
		})

		document.addEventListener('keydown', (event) => {
			if (event.key === 'Escape') {
				closeMenu()
			}
		})

		navItems.forEach((navItem) => {
			navItem.addEventListener('click', closeMenu)
		})
	})
</script>
