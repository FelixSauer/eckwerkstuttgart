---
import type {INavigation} from "../types/navigation";
import {Icon} from "astro-icon/components";

interface Props {
	navigation: INavigation[];
	navigationPostion: string;
}

const {navigation} = Astro.props;
const {navigationPostion} = Astro.props;
---

<nav class="navbar">
    <div class="navbar-display">
        <ul>
					{
						navigation.map((item) => {
							return (
                      <li>
                          <a
                                  href={
																		navigationPostion === "header" ? "#" + item.title : item.title
																	}
                                  data-href={item.title}
                                  aria-current="page"
                          >
														{item.title}
                          </a>
                      </li>

							);
						})
					}
        </ul>
    </div>
    <div class="navbar-mobile">
        <button>
            <Icon name="line-md:close-to-menu-transition"/>
        </button>

        <div>
            <ul>
							{
								navigation.map((item) => {
									return (
                          <li>
                              <a
                                      href={
																				navigationPostion === "header" ? "#" + item.title : item.title
																			}
                                      data-href={item.title}
                                      aria-current="page"
                              >
																{item.title}
                              </a>
                          </li>

									);
								})
							}
            </ul>
        </div>
    </div>
</nav>

<script>
	//---- Navbar ----
	const navbarMobile = document.querySelector(".navbar-mobile");

	navbarMobile?.addEventListener("click", () => {
		navbarMobile?.classList.toggle("active");
	});


	//------ Navigation ----
	let scrollTimeout: ReturnType<typeof setTimeout> | null = null;

	document.addEventListener("DOMContentLoaded", () => {
		initNavigation();
		initIntersectionObserver();
	});

	function initNavigation(): void {
		window.addEventListener('hashchange', updateActiveLink);
		updateActiveLink();
	}

	function updateActiveLink(): void {
		const navigationLinks = document.querySelectorAll<HTMLAnchorElement>('a[data-href]');
		const currentUrl = window.location.hash.substring(1);

		navigationLinks.forEach((link) => {
			const linkHref = link?.getAttribute('data-href')?.substring(1);
			link.classList.toggle("active", linkHref === currentUrl);
		});
	}

	function initIntersectionObserver(): void {
		const observerOptions: IntersectionObserverInit = {
			root: null,
			rootMargin: '0px',
			threshold: 0.5
		};

		const observerCallback: IntersectionObserverCallback = (entries) => {
			entries.forEach(entry => {
				if (entry.isIntersecting) {
					const sectionId = entry.target.id;
					handleScrollStop(sectionId);
				}
			});
		};

		const observer = new IntersectionObserver(observerCallback, observerOptions);
		document.querySelectorAll<HTMLElement>('section').forEach(section => {
			observer.observe(section);
		});
	}

	function handleScrollStop(sectionId: string): void {
		const activeLink = document.querySelector<HTMLAnchorElement>(`a[data-href='#${sectionId}']`);

		if (activeLink) {
			if (scrollTimeout !== null) {
				clearTimeout(scrollTimeout);
			}

			scrollTimeout = setTimeout(() => {
				document.querySelectorAll<HTMLAnchorElement>('a[data-href]').forEach(link => {
					link.classList.remove('active');
				});
				activeLink.classList.add('active');
			}, 200) as any;
		}
	}
</script>


<style lang="scss">
  @import "./../styles/GlobalStyling";

  nav {
    align-items: center;

    ul {
      display: flex;
      list-style: none;
      margin: unset;
      padding: unset;

      li {
        margin-right: $spacing-l;
        font-weight: 300;

        &:last-child {
          margin-right: unset;
        }
      }
    }
  }

  .navbar {
    .navbar-mobile {
      cursor: pointer;
      display: flex;

      @include min-width('l') {
        display: none;
      }

      button {
        background: none;
        border: none;
        color: $color-white;
        font-size: 1.5rem;
        padding: 0;
        transition: color 0.5s;
        z-index: 2000;

        &:hover {
          color: $color-secondary;
        }

        &:focus {
          color: $color-secondary;
        }
      }

      div {
        display: none;
      }

      &.active {
        div {
          display: flex;
          width: 100vw;
          height: 100vw;

          ul {
            display: flex;
            flex-direction: column;
            background-color: $color-primary;
            width: 100%;

            list-style: none;

            li {
              &:last-child {
                margin: unset;
              }
            }
          }
        }
      }
    }

    .navbar-display {
      display: none;

      @include min-width('l') {
        display: block;
      }

      a {
        color: $color-white;
        opacity: 0.5;
        text-decoration: none;
        text-transform: uppercase;
        font-family: Source Code Pro Variable, sans-serif;
        padding: $spacing-s;
        border: 1px solid transparent;
        transition: border 0.5s;

        &.active {
          opacity: 1;
        }

        &:hover {
          opacity: 0.75;
          color: $color-secondary;
        }

        &:focus {
          color: $color-secondary;
        }
      }
    }

  }
</style>
